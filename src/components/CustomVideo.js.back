import React, { Component } from 'react';
import { TouchableOpacity, Platform, StyleSheet, Text, View, ScrollView, Image, PixelRatio, DeviceEventEmitter } from 'react-native';
import Video, { FilterType } from 'react-native-video';
import { getVideoInfo, parseVideoPlaingUrl } from '../services/videoPlayerService';
import CustomPopView from './CustomPopView';

let url = 'https://vd1.bdstatic.com/mda-hexnfica0fzu4yfs/hd/mda-hexnfica0fzu4yfs.mp4?playlist=%5B%22hd%22%5D&auth_key=1558260801-0-0-732b4a74bc5054aaf63c2d56e757685f&bcevod_channel=searchbox_feed&pd=bjh&abtest=all'


const filterTypes = [
    FilterType.NONE,
    FilterType.INVERT,
    FilterType.MONOCHROME,
    FilterType.POSTERIZE,
    FilterType.FALSE,
    FilterType.MAXIMUMCOMPONENT,
    FilterType.MINIMUMCOMPONENT,
    FilterType.CHROME,
    FilterType.FADE,
    FilterType.INSTANT,
    FilterType.MONO,
    FilterType.NOIR,
    FilterType.PROCESS,
    FilterType.TONAL,
    FilterType.TRANSFER,
    FilterType.SEPIA
];


export default class VideoPlayerPage extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            rate: 1,
            volume: 1,
            muted: false,
            resizeMode: 'contain',
            duration: 0.0,
            currentTime: 0.0,
            controls: false,
            paused: true,
            skin: 'custom',
            ignoreSilentSwitch: null,
            isBuffering: false,
            filter: FilterType.NONE,
            filterEnabled: true,

            videoInfo: null,
            isVisible: false,
        }
        this.onLoad = this.onLoad.bind(this);
        this.onProgress = this.onProgress.bind(this);
        this.onBuffer = this.onBuffer.bind(this);
    }

    componentDidMount() {
        const { flag, id } = this.props.route.params

        getVideoInfo(flag, id).then((res) => {
            this.setState({
                videoInfo: res
            }, () => {
                // this.state.videoInfo.url.

                this.currentVideoOriginUrl = this.state.videoInfo.url
                if (this.state.videoInfo.url.includes('.html')) {
                    this._parseVideoPlayingUrl(this.currentVideoOriginUrl)
                } else {
                    this.currentVideoPlayingUrl = this.currentVideoOriginUrl
                }
                console.log(this.state.videoInfo)
            })
        })

        this._sceneChangeListener = DeviceEventEmitter.addListener('sceneChange', (events) => {

            this.setState({ isVisible: !this.state.isVisible })
                ;
        });
    }

    componentWillUnmount() {
        this.setState({
            paused: true,
        })
        this._sceneChangeListener.remove();
    }

    _parseVideoPlayingUrl(url) {
        parseVideoPlaingUrl(url).then((res) => {

            console.log("_parseVideoPlayingUrl:" + res)
            if (url != null && url.length > 0) {
                this.setState({
                    parseVideoPlaingUrl: res
                })
            }
        })
    }

    onLoad(data) {
        console.log('On load fired!');
        this.setState({ duration: data.duration });
    }

    onProgress(data) {
        this.setState({ currentTime: data.currentTime });
    }

    onBuffer({ isBuffering }: { isBuffering: boolean }) {
        this.setState({ isBuffering });
    }

    getCurrentTimePercentage() {
        if (this.state.currentTime > 0) {
            return parseFloat(this.state.currentTime) / parseFloat(this.state.duration);
        } else {
            return 0;
        }
    }

    setFilter(step) {
        let index = filterTypes.indexOf(this.state.filter) + step;

        if (index === filterTypes.length) {
            index = 0;
        } else if (index === -1) {
            index = filterTypes.length - 1;
        }

        this.setState({
            filter: filterTypes[index]
        })
    }
    renderSkinControl(skin) {
        const isSelected = this.state.skin == skin;
        const selectControls = skin == 'native' || skin == 'embed';
        return (
            <TouchableOpacity onPress={() => {
                this.setState({
                    controls: selectControls,
                    skin: skin
                })
            }}>
                <Text style={[styles.controlOption, { fontWeight: isSelected ? "bold" : "normal" }]}>
                    {skin}
                </Text>
            </TouchableOpacity>
        );
    }

    renderRateControl(rate) {
        const isSelected = (this.state.rate == rate);

        return (
            <TouchableOpacity onPress={() => { this.setState({ rate: rate }) }}>
                <Text style={[styles.controlOption, { fontWeight: isSelected ? "bold" : "normal" }]}>
                    {rate}x
                </Text>
            </TouchableOpacity>
        )
    }
    renderResizeModeControl(resizeMode) {
        const isSelected = (this.state.resizeMode == resizeMode);

        return (
            <TouchableOpacity onPress={() => { this.setState({ resizeMode: resizeMode }) }}>
                <Text style={[styles.controlOption, { fontWeight: isSelected ? "bold" : "normal" }]}>
                    {resizeMode}
                </Text>
            </TouchableOpacity>
        )
    }

    renderVolumeControl(volume) {
        const isSelected = (this.state.volume == volume);

        return (
            <TouchableOpacity onPress={() => { this.setState({ volume: volume }) }}>
                <Text style={[styles.controlOption, { fontWeight: isSelected ? "bold" : "normal" }]}>
                    {volume * 100}%
                </Text>
            </TouchableOpacity>
        )
    }

    renderIgnoreSilentSwitchControl(ignoreSilentSwitch) {
        const isSelected = (this.state.ignoreSilentSwitch == ignoreSilentSwitch);

        return (
            <TouchableOpacity onPress={() => { this.setState({ ignoreSilentSwitch: ignoreSilentSwitch }) }}>
                <Text style={[styles.controlOption, { fontWeight: isSelected ? "bold" : "normal" }]}>
                    {ignoreSilentSwitch}
                </Text>
            </TouchableOpacity>
        )
    }

    renderCustomSkin() {
        console.log('renderCustomSkin')
        const flexCompleted = this.getCurrentTimePercentage() * 100;
        const flexRemaining = (1 - this.getCurrentTimePercentage()) * 100;

        return (
            <View style={styles.container}>
                <TouchableOpacity style={styles.fullScreen} onPress={() => { this.setState({ paused: !this.state.paused }) }}>
                    <Video
                        source={{ uri: url }}
                        style={styles.fullScreen}
                        rate={this.state.rate}
                        paused={this.state.paused}
                        volume={this.state.volume}
                        muted={this.state.muted}
                        ignoreSilentSwitch={this.state.ignoreSilentSwitch}
                        resizeMode={this.state.resizeMode}
                        onLoad={this.onLoad}
                        onBuffer={this.onBuffer}
                        onProgress={this.onProgress}
                        onEnd={() => { AlertIOS.alert('Done!') }}
                        repeat={true}
                        filter={this.state.filter}
                        filterEnabled={this.state.filterEnabled}
                    />
                </TouchableOpacity>
                {this._renderPopView()}
                <View style={styles.controls}>
                    <View style={styles.generalControls}>
                        <View style={styles.skinControl}>
                            {this.renderSkinControl('custom')}
                            {this.renderSkinControl('native')}
                            {this.renderSkinControl('embed')}
                        </View>
                        {
                            (this.state.filterEnabled) ?
                                <View style={styles.skinControl}>
                                    <TouchableOpacity onPress={() => {
                                        this.setFilter(-1)
                                    }}>
                                        <Text style={styles.controlOption}>Previous Filter</Text>
                                    </TouchableOpacity>
                                    <TouchableOpacity onPress={() => {
                                        this.setFilter(1)
                                    }}>
                                        <Text style={styles.controlOption}>Next Filter</Text>
                                    </TouchableOpacity>
                                </View> : null
                        }
                    </View>
                    <View style={styles.generalControls}>
                        <View style={styles.rateControl}>
                            {this.renderRateControl(0.5)}
                            {this.renderRateControl(1.0)}
                            {this.renderRateControl(2.0)}
                        </View>

                        <View style={styles.volumeControl}>
                            {this.renderVolumeControl(0.5)}
                            {this.renderVolumeControl(1)}
                            {this.renderVolumeControl(1.5)}
                        </View>

                        <View style={styles.resizeModeControl}>
                            {this.renderResizeModeControl('cover')}
                            {this.renderResizeModeControl('contain')}
                            {this.renderResizeModeControl('stretch')}
                        </View>
                    </View>
                    <View style={styles.generalControls}>
                        {
                            (Platform.OS === 'ios') ?
                                <View style={styles.ignoreSilentSwitchControl}>
                                    {this.renderIgnoreSilentSwitchControl('ignore')}
                                    {this.renderIgnoreSilentSwitchControl('obey')}
                                </View> : null
                        }
                    </View>

                    <View style={styles.trackingControls}>
                        <View style={styles.progress}>
                            <View style={[styles.innerProgressCompleted, { flex: flexCompleted }]} />
                            <View style={[styles.innerProgressRemaining, { flex: flexRemaining }]} />
                        </View>
                    </View>
                </View>
            </View>
        );
    }

    renderNativeSkin() {
        console.log('renderNativeSkin')
        const videoStyle = this.state.skin == 'embed' ? styles.nativeVideoControls : styles.fullScreen;
        return (
            <View style={styles.container}>
                <View style={styles.fullScreen}>
                    <Video
                        source={{ uri: url }}
                        style={videoStyle}
                        rate={this.state.rate}
                        paused={this.state.paused}
                        volume={this.state.volume}
                        muted={this.state.muted}
                        ignoreSilentSwitch={this.state.ignoreSilentSwitch}
                        resizeMode={this.state.resizeMode}
                        onLoad={this.onLoad}
                        onBuffer={this.onBuffer}
                        onProgress={this.onProgress}
                        onEnd={() => { AlertIOS.alert('Done!') }}
                        repeat={true}
                        controls={this.state.controls}
                        filter={this.state.filter}
                        filterEnabled={this.state.filterEnabled}
                    />
                </View>
                {this._renderPopView()}
                <View style={styles.controls}>
                    <View style={styles.generalControls}>
                        <View style={styles.skinControl}>
                            {this.renderSkinControl('custom')}
                            {this.renderSkinControl('native')}
                            {this.renderSkinControl('embed')}
                        </View>
                        {
                            (this.state.filterEnabled) ?
                                <View style={styles.skinControl}>
                                    <TouchableOpacity onPress={() => {
                                        this.setFilter(-1)
                                    }}>
                                        <Text style={styles.controlOption}>Previous Filter</Text>
                                    </TouchableOpacity>
                                    <TouchableOpacity onPress={() => {
                                        this.setFilter(1)
                                    }}>
                                        <Text style={styles.controlOption}>Next Filter</Text>
                                    </TouchableOpacity>
                                </View> : null
                        }
                    </View>
                    <View style={styles.generalControls}>
                        <View style={styles.rateControl}>
                            {this.renderRateControl(0.5)}
                            {this.renderRateControl(1.0)}
                            {this.renderRateControl(2.0)}
                        </View>

                        <View style={styles.volumeControl}>
                            {this.renderVolumeControl(0.5)}
                            {this.renderVolumeControl(1)}
                            {this.renderVolumeControl(1.5)}
                        </View>

                        <View style={styles.resizeModeControl}>
                            {this.renderResizeModeControl('cover')}
                            {this.renderResizeModeControl('contain')}
                            {this.renderResizeModeControl('stretch')}
                        </View>
                    </View>
                    <View style={styles.generalControls}>
                        {
                            (Platform.OS === 'ios') ?
                                <View style={styles.ignoreSilentSwitchControl}>
                                    {this.renderIgnoreSilentSwitchControl('ignore')}
                                    {this.renderIgnoreSilentSwitchControl('obey')}
                                </View> : null
                        }
                    </View>
                </View>

            </View>
        );
    }

    _renderPopView() {
        debugger
        return this.state.videoInfo != null ? <CustomPopView entityList={this.state.videoInfo.info[0].video} callback={(i) => {

            console.log('callback++')
            //   this.setState({
            //       type: i,
            //       typeName: typeArr[i],
            //   })
        }} show={this.state.isVisible} closeModal={(show) => {

            console.log('closeModal---')
            this.setState({
                isVisible: show
            })
        }} /> : <Text>ddd</Text>
    }

    render() {

        return this.state.controls ? this.renderNativeSkin() : this.renderCustomSkin();
    }
}




const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'black',
    },
    fullScreen: {
        position: 'absolute',
        top: 0,
        left: 0,
        bottom: 0,
        right: 0,
    },
    controls: {
        backgroundColor: "transparent",
        borderRadius: 5,
        position: 'absolute',
        bottom: 44,
        left: 4,
        right: 4,
    },
    progress: {
        flex: 1,
        flexDirection: 'row',
        borderRadius: 3,
        overflow: 'hidden',
    },
    innerProgressCompleted: {
        height: 20,
        backgroundColor: '#cccccc',
    },
    innerProgressRemaining: {
        height: 20,
        backgroundColor: '#2C2C2C',
    },
    generalControls: {
        flex: 1,
        flexDirection: 'row',
        overflow: 'hidden',
        paddingBottom: 10,
    },
    skinControl: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
    },
    rateControl: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
    },
    volumeControl: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
    },
    resizeModeControl: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center'
    },
    ignoreSilentSwitchControl: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center'
    },
    controlOption: {
        alignSelf: 'center',
        fontSize: 11,
        color: "white",
        paddingLeft: 2,
        paddingRight: 2,
        lineHeight: 12,
    },
    nativeVideoControls: {
        top: 184,
        height: 300
    }
});


// import React, { Component } from 'react';
// import { TouchableOpacity, Platform, StyleSheet, Text, View, ScrollView, Image, PixelRatio, DeviceEventEmitter } from 'react-native';
// import Video, { FilterType } from 'react-native-video';
// import { getVideoInfo, parseVideoPlaingUrl } from '../services/videoPlayerService';
// import CustomPopView from '../components/CustomPopView';
// import { BaseComponent } from '../components/baseComponent/baseComponent';
// import { commonStyle } from '../utils/commonStyle';
// import CustomLoading from '../components/CustomLoading';

// // let url = 'https://vd1.bdstatic.com/mda-hexnfica0fzu4yfs/hd/mda-hexnfica0fzu4yfs.mp4?playlist=%5B%22hd%22%5D&auth_key=1558260801-0-0-732b4a74bc5054aaf63c2d56e757685f&bcevod_channel=searchbox_feed&pd=bjh&abtest=all'


// const filterTypes = [
//     FilterType.NONE,
//     FilterType.INVERT,
//     FilterType.MONOCHROME,
//     FilterType.POSTERIZE,
//     FilterType.FALSE,
//     FilterType.MAXIMUMCOMPONENT,
//     FilterType.MINIMUMCOMPONENT,
//     FilterType.CHROME,
//     FilterType.FADE,
//     FilterType.INSTANT,
//     FilterType.MONO,
//     FilterType.NOIR,
//     FilterType.PROCESS,
//     FilterType.TONAL,
//     FilterType.TRANSFER,
//     FilterType.SEPIA
// ];


// export default class VideoPlayerPage extends BaseComponent {
//     constructor(props) {
//         super(props);
//         this.state = {
//             rate: 1,
//             volume: 1,
//             muted: false,
//             resizeMode: 'contain',
//             duration: 0.0,
//             currentTime: 0.0,
//             controls: true,
//             paused: true,
//             skin: 'native',
//             ignoreSilentSwitch: null,
//             isBuffering: false,
//             filter: FilterType.NONE,
//             filterEnabled: true,
//             poster: '',

//             videoInfo: null,
//             isVisible: false,
//             currentPlayingOriginUrl: null, // 正在播放播放视频原始url
//             currentPlayingParsedUrl: null, // 正在播放的解析后的视频url
//             loadDataFinished: false,
//         }
//         this.onLoad = this.onLoad.bind(this);
//         this.onProgress = this.onProgress.bind(this);
//         this.onBuffer = this.onBuffer.bind(this);

        
//         let playerRef;
//     }

//     componentDidMount() {
//         const { flag, id } = this.props.route.params
//         console.log('flag: id:' + flag + id)
//         getVideoInfo(flag, id).then((res) => {
//             this.setState({
//                 videoInfo: res,
//                 currentPlayingOriginUrl: res.url,
//                 poster: res.pic,
//             }, () => {
//                 console.log('componentDidMount:' + this.state.currentPlayingOriginUrl)
//                 this.navigationBarProps()
//                 if (this.state.videoInfo.url.includes('.html')) {
//                     this._parseVideoPlayingUrl(this.state.currentPlayingOriginUrl)
//                 } else {
//                     this.setState({
//                         currentPlayingParsedUrl: this.state.currentPlayingOriginUrl,
//                     })
//                 }
//             })
//         })

//         this._sceneChangeListener = DeviceEventEmitter.addListener('sceneChange', (events) => {
//             this.setState({ isVisible: !this.state.isVisible });
//         });
//     }

//     componentWillUnmount() {
//         console.log('componentWillUnmount---')
//         this.setState({ paused: true,
//         }, () => {
//             console.log('componentWillUnmount---setstate:' + this.state.paused)
//         })
//         // this._sceneChangeListener.remove();
//     }
   

//     _parseVideoPlayingUrl(url) {
//         parseVideoPlaingUrl(url).then((res) => {
//             console.log("_parseVideoPlayingUrl:" + res)
//             if (url != null && url.length > 0) {
//                 this.setState({
//                     currentPlayingParsedUrl: res,
//                 })
//             }
//         })
//     }

//     onLoad(data) {
//         console.log('On load fired!');
//         this.setState({ duration: data.duration });
//     }

//     onProgress(data) {
//         this.setState({ currentTime: data.currentTime });
//     }

//     onBuffer({ isBuffering }: { isBuffering: boolean }) {
//         console.log('onBugger------')
//         this.setState({ isBuffering });
//         this.setState({
//             loadDataFinished: true,
//         })
//     }

//     getCurrentTimePercentage() {
//         if (this.state.currentTime > 0) {
//             return parseFloat(this.state.currentTime) / parseFloat(this.state.duration);
//         } else {
//             return 0;
//         }
//     }

//     setFilter(step) {
//         let index = filterTypes.indexOf(this.state.filter) + step;

//         if (index === filterTypes.length) {
//             index = 0;
//         } else if (index === -1) {
//             index = filterTypes.length - 1;
//         }

//         this.setState({
//             filter: filterTypes[index]
//         })
//     }
//     renderSkinControl(skin) {
//         const isSelected = this.state.skin == skin;
//         const selectControls = skin == 'native' || skin == 'embed';
//         return (
//             <TouchableOpacity onPress={() => {
//                 this.setState({
//                     controls: selectControls,
//                     skin: skin
//                 })
//             }}>
//                 <Text style={[styles.controlOption, { fontWeight: isSelected ? "bold" : "normal" }]}>
//                     {skin}
//                 </Text>
//             </TouchableOpacity>
//         );
//     }

//     renderRateControl(rate) {
//         const isSelected = (this.state.rate == rate);

//         return (
//             <TouchableOpacity onPress={() => { this.setState({ rate: rate }) }}>
//                 <Text style={[styles.controlOption, { fontWeight: isSelected ? "bold" : "normal" }]}>
//                     {rate}x
//                 </Text>
//             </TouchableOpacity>
//         )
//     }
//     renderResizeModeControl(resizeMode) {
//         const isSelected = (this.state.resizeMode == resizeMode);

//         return (
//             <TouchableOpacity onPress={() => { this.setState({ resizeMode: resizeMode }) }}>
//                 <Text style={[styles.controlOption, { fontWeight: isSelected ? "bold" : "normal" }]}>
//                     {resizeMode}
//                 </Text>
//             </TouchableOpacity>
//         )
//     }

//     renderVolumeControl(volume) {
//         const isSelected = (this.state.volume == volume);

//         return (
//             <TouchableOpacity onPress={() => { this.setState({ volume: volume }) }}>
//                 <Text style={[styles.controlOption, { fontWeight: isSelected ? "bold" : "normal" }]}>
//                     {volume * 100}%
//                 </Text>
//             </TouchableOpacity>
//         )
//     }

//     renderIgnoreSilentSwitchControl(ignoreSilentSwitch) {
//         const isSelected = (this.state.ignoreSilentSwitch == ignoreSilentSwitch);

//         return (
//             <TouchableOpacity onPress={() => { this.setState({ ignoreSilentSwitch: ignoreSilentSwitch }) }}>
//                 <Text style={[styles.controlOption, { fontWeight: isSelected ? "bold" : "normal" }]}>
//                     {ignoreSilentSwitch}
//                 </Text>
//             </TouchableOpacity>
//         )
//     }

//     renderCustomSkin() {
//         console.log('renderCustomSkin')
//         const flexCompleted = this.getCurrentTimePercentage() * 100;
//         const flexRemaining = (1 - this.getCurrentTimePercentage()) * 100;

//         return (
//             <View style={styles.container}>
//                 <TouchableOpacity activeOpacity={1} style={styles.fullScreen} onPress={() => { this.setState({ paused: !this.state.paused }) }}>
//                     <Video
//                         source={{ uri: this.state.currentPlayingParsedUrl }}
//                         style={styles.fullScreen}
//                         rate={this.state.rate}
//                         paused={this.state.paused}
//                         volume={this.state.volume}
//                         muted={this.state.muted}
//                         ignoreSilentSwitch={this.state.ignoreSilentSwitch}
//                         resizeMode={this.state.resizeMode}
//                         onLoad={this.onLoad}
//                         onBuffer={this.onBuffer}
//                         onProgress={this.onProgress}
//                         onEnd={() => { AlertIOS.alert('Done!') }}
//                         repeat={true}
//                         filter={this.state.filter}
//                         filterEnabled={this.state.filterEnabled}
//                     />
//                 </TouchableOpacity>
//                 {this._renderPopView()}
//                 <View style={styles.controls}>
//                     <View style={styles.generalControls}>
//                         {/* <View style={styles.skinControl}>
//                             {this.renderSkinControl('custom')}
//                             {this.renderSkinControl('native')}
//                             {this.renderSkinControl('embed')}
//                         </View> */}
//                         {/* {
//                             (this.state.filterEnabled) ?
//                                 <View style={styles.skinControl}>
//                                     <TouchableOpacity onPress={() => {
//                                         this.setFilter(-1)
//                                     }}>
//                                         <Text style={styles.controlOption}>Previous Filter</Text>
//                                     </TouchableOpacity>
//                                     <TouchableOpacity onPress={() => {
//                                         this.setFilter(1)
//                                     }}>
//                                         <Text style={styles.controlOption}>Next Filter</Text>
//                                     </TouchableOpacity>
//                                 </View> : null
//                         } */}
//                     </View>
//                     <View style={styles.generalControls}>
//                         {/* <View style={styles.rateControl}>
//                             {this.renderRateControl(0.5)}
//                             {this.renderRateControl(1.0)}
//                             {this.renderRateControl(2.0)}
//                         </View> */}

//                         {/* <View style={styles.volumeControl}>
//                             {this.renderVolumeControl(0.5)}
//                             {this.renderVolumeControl(1)}
//                             {this.renderVolumeControl(1.5)}
//                         </View> */}

//                         {/* <View style={styles.resizeModeControl}>
//                             {this.renderResizeModeControl('cover')}
//                             {this.renderResizeModeControl('contain')}
//                             {this.renderResizeModeControl('stretch')}
//                         </View> */}
//                     </View>
//                     {/* <View style={styles.generalControls}>
//                         {
//                             (Platform.OS === 'ios') ?
//                                 <View style={styles.ignoreSilentSwitchControl}>
//                                     {this.renderIgnoreSilentSwitchControl('ignore')}
//                                     {this.renderIgnoreSilentSwitchControl('obey')}
//                                 </View> : null
//                         }
//                     </View> */}

//                     <View style={styles.trackingControls}>
//                         <View style={styles.progress}>
//                             <View style={[styles.innerProgressCompleted, { flex: flexCompleted }]} />
//                             <View style={[styles.innerProgressRemaining, { flex: flexRemaining }]} />
//                         </View>
//                     </View>
//                 </View>
//             </View>
//         );
//     }

//     renderNativeSkin() {
//         // debugger
//         // if (this.state.currentPlayingParsedUrl == null) {
//         //     console.log('_renderSwitchView=====')
//         //     return this._renderSwitchView()
//         //     return
//         // }
//         // console.log('renderNativeSkin')
//         debugger
//         const videoStyle = this.state.skin == 'embed' ? styles.nativeVideoControls : styles.fullScreen;
//         return (
//             <View style={styles.container}>
//                 {this.state.currentPlayingParsedUrl != null ?
//                 <TouchableOpacity activeOpacity={1} style={styles.fullScreen} onLongPress={() => { this.setState({ rate: 2 }) }} onPressOut={() => { this.setState({ rate: 1 }) }} onPress={() => { this.setState({ paused: !this.state.paused }) }}>
//                     <View style={styles.fullScreen}>
//                         <Video
//                             source={{ uri: this.state.currentPlayingParsedUrl }}
//                             key={this.state.currentPlayingParsedUrls}
//                             style={videoStyle}
//                             rate={this.state.rate}
//                             paused={this.state.paused}
//                             volume={this.state.volume}
//                             muted={this.state.muted}
//                             ignoreSilentSwitch={this.state.ignoreSilentSwitch}
//                             resizeMode={this.state.resizeMode}
//                             onLoad={this.onLoad}
//                             onBuffer={this.onBuffer}
//                             onProgress={this.onProgress}
//                             onEnd={() => { AlertIOS.alert('Done!') }}
//                             repeat={true}
//                             controls={this.state.controls}
//                             filter={this.state.filter}
//                             filterEnabled={this.state.filterEnabled}
//                             poster={this.state.poster}
//                             // ref={(vd) => playerRef = vd}
//                             // playInBackground={false}
//                         />
//                     </View>
//                 </TouchableOpacity> 
//                 : <></>}
//                 {this._renderPopView()}
//                 <CustomLoading showSpinner={!this.state.loadDataFinished}></CustomLoading>

//                 <View style={styles.controls}>
//                     <View style={styles.generalControls}>
//                         {/* <View style={styles.skinControl}>
//                             {this.renderSkinControl('custom')}
//                             {this.renderSkinControl('native')}
//                             {this.renderSkinControl('embed')}
//                         </View> */}
//                         {/* {
//                             (this.state.filterEnabled) ?
//                                 <View style={styles.skinControl}>
//                                     <TouchableOpacity onPress={() => {
//                                         this.setFilter(-1)
//                                     }}>
//                                         <Text style={styles.controlOption}>Previous Filter</Text>
//                                     </TouchableOpacity>
//                                     <TouchableOpacity onPress={() => {
//                                         this.setFilter(1)
//                                     }}>
//                                         <Text style={styles.controlOption}>Next Filter</Text>
//                                     </TouchableOpacity>
//                                 </View> : null
//                         } */}
//                     </View>
//                     <View style={styles.generalControls}>
//                         {/* <View style={styles.rateControl}>
//                             {this.renderRateControl(0.5)}
//                             {this.renderRateControl(1.0)}
//                             {this.renderRateControl(2.0)}
//                         </View> */}

//                         {/* <View style={styles.volumeControl}>
//                             {this.renderVolumeControl(0.5)}
//                             {this.renderVolumeControl(1)}
//                             {this.renderVolumeControl(1.5)}
//                         </View> */}

//                         {/* <View style={styles.resizeModeControl}>
//                             {this.renderResizeModeControl('cover')}
//                             {this.renderResizeModeControl('contain')}
//                             {this.renderResizeModeControl('stretch')}
//                         </View> */}
//                     </View>
//                     {/* <View style={styles.generalControls}>
//                         {
//                             (Platform.OS === 'ios') ?
//                                 <View style={styles.ignoreSilentSwitchControl}>
//                                     {this.renderIgnoreSilentSwitchControl('ignore')}
//                                     {this.renderIgnoreSilentSwitchControl('obey')}
//                                 </View> : null
//                         }
//                     </View> */}
//                 </View>
//             </View>
//         );
//     }

//     _renderVideo() {
//         debugger
//         return (
//             this.state.currentPlayingParsedUrl != null ?
//                 <TouchableOpacity activeOpacity={1} style={styles.fullScreen} onLongPress={() => { this.setState({ rate: 2 }) }} onPressOut={() => { this.setState({ rate: 1 }) }} onPress={() => { this.setState({ paused: !this.state.paused }) }}>
//                     <View style={styles.fullScreen}>
//                         <Video
//                             source={{ uri: this.state.currentPlayingParsedUrl }}
//                             key={this.state.currentPlayingParsedUrls}
//                             style={videoStyle}
//                             rate={this.state.rate}
//                             paused={this.state.paused}
//                             volume={this.state.volume}
//                             muted={this.state.muted}
//                             ignoreSilentSwitch={this.state.ignoreSilentSwitch}
//                             resizeMode={this.state.resizeMode}
//                             onLoad={this.onLoad}
//                             onBuffer={this.onBuffer}
//                             onProgress={this.onProgress}
//                             onEnd={() => { AlertIOS.alert('Done!') }}
//                             repeat={true}
//                             controls={this.state.controls}
//                             filter={this.state.filter}
//                             filterEnabled={this.state.filterEnabled}
//                             poster={this.state.poster}
//                             ref={(vd) => playerRef = vd}
//                             // playInBackground={false}
//                         />
//                     </View>
//                 </TouchableOpacity> 
//                 : <></>
//         )
//     }
//     _renderSwitchView() {
//         return (this.state.videoInfo != null ? 
//         <View>
//             <Image source={this.state.poster} width={100} height={100}></Image>
//         </View> : <Text>loading...</Text>
//         )
//     }

//     _handleCurrentPlayingUrlAtIndex(index) {
//         debugger
//         // playerRef = null
//         // playerRef.unMont()
//         if (this.state.videoInfo != null) {
//             let originUrl = this.state.videoInfo.info[0].video[index]
//             let playingUrl = originUrl
//             let arr = playingUrl.split('$')
//             if (arr.length == 3) {
//                 playingUrl = arr[1]
//             }
//             if (playingUrl.endsWith('.html')) {
//                 this._parseVideoPlayingUrl(playingUrl)
//             } else {
//                 this.setState({
//                     currentPlayingOriginUrl: originUrl,
//                     currentPlayingParsedUrl: playingUrl,
//                 }, () => {
//                     this.forceUpdate(); 
//                 })
//             }
//         }
//     }

//     _renderPopView() {
//         // console.log('_renderPopView')
//         return this.state.videoInfo != null ? <CustomPopView dataSource={this.state.videoInfo.info[0].video} callback={(i) => {
//             debugger
//             console.log('callback++')
//             this.setState({
//                 currentPlayingOriginUrl: null,
//                 currentPlayingParsedUrl: null,
//             })
//             this._handleCurrentPlayingUrlAtIndex(i)

//         }} show={this.state.isVisible} closeModal={(show) => {

//             console.log('closeModal---')
//             this.setState({
//                 isVisible: show
//             })
//         }} currentPlayingUrl={this.state.currentPlayingOriginUrl} /> : <Text>ddd</Text>
//     }

//     navigationBarProps() {

//         var title = ""
//         var rightTitle = ""
//         if (this.state.videoInfo != null) {
//             title = this.state.videoInfo.title
//             if (this.state.videoInfo.info[0].video.length > 0) {
//                 rightTitle = "..."
//             }
//         }

//         return {
//             title: title,
//             titleStyle: {
//                 color: 'white',
//                 height: 30,
//                 marginTop: commonStyle.navHeight,
//             },
//             // subTitle: 'subTitle',
//             rightTitle: rightTitle,
//             rightTitleStyle: { color: 'white', width: 50, height: 50, marginBottom: -40, lineHeight: 50, textAlign: 'center', textAlignVertical: 'center' }
//         }
//     }

//     onLeftPress() {
//         // alert('点击了左边的按钮')
//         this.setState({ paused: true})

//         this.props.navigation.goBack();
//     }

//     onRightPress() {
//         // alert('点击了右边的按钮')
//         this.setState({ isVisible: !this.state.isVisible })
//     }
    
//     _render() {
//         return this.state.controls ? this.renderNativeSkin() : this.renderCustomSkin();
//     }
// }




// const styles = StyleSheet.create({
//     container: {
//         flex: 1,
//         justifyContent: 'center',
//         alignItems: 'center',
//         backgroundColor: 'black',
//     },
//     fullScreen: {
//         position: 'absolute',
//         top: 0,
//         left: 0,
//         bottom: 0,
//         right: 0,
//     },
//     controls: {
//         backgroundColor: "transparent",
//         borderRadius: 5,
//         position: 'absolute',
//         bottom: 44,
//         left: 4,
//         right: 4,
//     },
//     progress: {
//         flex: 1,
//         flexDirection: 'row',
//         borderRadius: 3,
//         overflow: 'hidden',
//     },
//     innerProgressCompleted: {
//         height: 20,
//         backgroundColor: '#cccccc',
//     },
//     innerProgressRemaining: {
//         height: 20,
//         backgroundColor: '#2C2C2C',
//     },
//     generalControls: {
//         flex: 1,
//         flexDirection: 'row',
//         overflow: 'hidden',
//         paddingBottom: 10,
//     },
//     skinControl: {
//         flex: 1,
//         flexDirection: 'row',
//         justifyContent: 'center',
//     },
//     rateControl: {
//         flex: 1,
//         flexDirection: 'row',
//         justifyContent: 'center',
//     },
//     volumeControl: {
//         flex: 1,
//         flexDirection: 'row',
//         justifyContent: 'center',
//     },
//     resizeModeControl: {
//         flex: 1,
//         flexDirection: 'row',
//         alignItems: 'center',
//         justifyContent: 'center'
//     },
//     ignoreSilentSwitchControl: {
//         flex: 1,
//         flexDirection: 'row',
//         alignItems: 'center',
//         justifyContent: 'center'
//     },
//     controlOption: {
//         alignSelf: 'center',
//         fontSize: 11,
//         color: "white",
//         paddingLeft: 2,
//         paddingRight: 2,
//         lineHeight: 12,
//     },
//     nativeVideoControls: {
//         top: 184,
//         height: 300
//     }
// });